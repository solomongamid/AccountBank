<?php

namespace Proxies\__CG__\AccountBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Account extends \AccountBundle\Entity\Account implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'id', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'num', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'name', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'date', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'amount', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'beneficiaries', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'startTransaction', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'endTransaction'];
        }

        return ['__isInitialized__', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'id', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'num', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'name', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'date', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'amount', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'beneficiaries', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'startTransaction', '' . "\0" . 'AccountBundle\\Entity\\Account' . "\0" . 'endTransaction'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Account $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNum($num)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNum', [$num]);

        return parent::setNum($num);
    }

    /**
     * {@inheritDoc}
     */
    public function getNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNum', []);

        return parent::getNum();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', [$amount]);

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', []);

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTransaction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTransaction', []);

        return parent::getStartTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartTransaction($transaction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartTransaction', [$transaction]);

        return parent::setStartTransaction($transaction);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndTransaction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndTransaction', []);

        return parent::getEndTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndTransaction($transactionEnd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndTransaction', [$transactionEnd]);

        return parent::setEndTransaction($transactionEnd);
    }

    /**
     * {@inheritDoc}
     */
    public function getBeneficiaries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBeneficiaries', []);

        return parent::getBeneficiaries();
    }

    /**
     * {@inheritDoc}
     */
    public function setBeneficiaries($beneficiaries)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBeneficiaries', [$beneficiaries]);

        return parent::setBeneficiaries($beneficiaries);
    }

    /**
     * {@inheritDoc}
     */
    public function addBeneficiary($beneficiary)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBeneficiary', [$beneficiary]);

        return parent::addBeneficiary($beneficiary);
    }

}
